664
Chapter 14. Graph Algorithms
2342
1235
802
337
1846
187
849
1258
1090
867
621
PVD
740
1391
1121
144
946
1464
184
2704
LAX
ORD
BOS
JFK
BWI
MIA
DFW
SFO
946
371
2658
621
1423
2467
0
328
184
802
337
1846
187
849
1258
1090
867
621
PVD
740
1391
1121
144
946
1464
184
2704
2342
1235
ORD
BOS
JFK
BWI
MIA
DFW
SFO
LAX
946
371
2467
621
1423
2658
0
328
184
(i)
(j)
Figure 14.17: An example execution of Dijkstra’s algorithm. (Continued from Fig-
ure 14.16.)
Why It Works
The interesting aspect of the Dijkstra algorithm is that, at the moment a vertex u
is pulled into C, its label D[u] stores the correct length of a shortest path from v
to u. Thus, when the algorithm terminates, it will have computed the shortest-path
distance from s to every vertex of G. That is, it will have solved the single-source
shortest-path problem.
It is probably not immediately clear why Dijkstra’s algorithm correctly ﬁnds the
shortest path from the start vertex s to each other vertex u in the graph. Why is it
that the distance from s to u is equal to the value of the label D[u] at the time vertex
u is removed from the priority queue Q and added to the cloud C? The answer
to this question depends on there being no negative-weight edges in the graph, for
it allows the greedy method to work correctly, as we show in the proposition that
follows.
Proposition 14.23: In Dijkstra’s algorithm, whenever a vertex v is pulled into the
cloud, the label D[v] is equal to d(s,v), the length of a shortest path from s to v.
Justiﬁcation:
Suppose that D[v] > d(s,v) for some vertex v in V, and let z
be the ﬁrst vertex the algorithm pulled into the cloud C (that is, removed from
Q) such that D[z] > d(s,z). There is a shortest path P from s to z (for otherwise
d(s,z) = ∞= D[z]). Let us therefore consider the moment when z is pulled into
C, and let y be the ﬁrst vertex of P (when going from s to z) that is not in C at this
moment. Let x be the predecessor of y in path P (note that we could have x = s).
(See Figure 14.18.) We know, by our choice of y, that x is already in C at this point.
