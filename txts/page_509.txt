11.3. AVL Trees
487
Performance of AVL Trees
By Proposition 11.2, the height of an AVL tree with n items is guaranteed to be
O(logn). Because the standard binary search tree operation had running times
bounded by the height (see Table 11.1), and because the additional work in main-
taining balance factors and restructuring an AVL tree can be bounded by the length
of a path in the tree, the traditional map operations run in worst-case logarithmic
time with an AVL tree. We summarize these results in Table 11.2, and illustrate
this performance in Figure 11.15.
Operation
Running Time
k in T
O(logn)
T[k] = v
O(logn)
T.delete(p), del T[k]
O(logn)
T.ﬁnd position(k)
O(logn)
T.ﬁrst(), T.last(), T.ﬁnd min(), T.ﬁnd max()
O(logn)
T.before(p), T.after(p)
O(logn)
T.ﬁnd lt(k), T.ﬁnd le(k), T.ﬁnd gt(k), T.ﬁnd ge(k)
O(logn)
T.ﬁnd range(start, stop)
O(s+logn)
iter(T), reversed(T)
O(n)
Table 11.2: Worst-case running times of operations for an n-item sorted map real-
ized as an AVL tree T, with s denoting the number of items reported by ﬁnd range.
O(logn)
O(1)
Height
Time per level
Worst-case time:
AVL Tree T:
down phase
up phase
O(logn)
O(1)
O(1)
Figure 11.15: Illustrating the running time of searches and updates in an A
VL tree.
The time performance is O(1) per level, broken into a down phase, which typi-
cally involves searching, and an up phase, which typically involves updating height
values and performing local trinode restructurings (rotations).
