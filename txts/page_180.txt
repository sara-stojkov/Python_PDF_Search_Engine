158
Chapter 4. Recursion
/user/rt/courses/
cs016/
cs252/
programs/
homeworks/
projects/
papers/
demos/
hw1
3K
hw2
2K
hw3
4K
pr1
57K
pr2
97K
pr3
74K
grades
8K
market
4786K
buylow
26K
sellhigh
55K
grades
3K
2K
1K
1K
1K
1K
1K
1K
1K
10K
229K
4870K
82K
4787K
5124K
249K
4874K
Figure 4.7: The same portion of a ﬁle system given in Figure 4.6, but with additional
annotations to describe the amount of disk space that is used. Within the icon for
each ﬁle or directory is the amount of space directly used by that artifact. Above
the icon for each directory is an indication of the cumulative disk space used by
that directory and all its (recursive) contents.
The cumulative disk space for an entry can be computed with a simple recursive
algorithm. It is equal to the immediate disk space used by the entry plus the sum
of the cumulative disk space usage of any entries that are stored directly within
the entry. For example, the cumulative disk space for cs016 is 249K because it
uses 2K itself, 8K cumulatively in grades, 10K cumulatively in homeworks, and
229K cumulatively in programs. Pseudo-code for this algorithm is given in Code
Fragment 4.4.
Algorithm DiskUsage(path):
Input: A string designating a path to a ﬁle-system entry
Output: The cumulative disk space used by that entry and any nested entries
total = size(path)
{immediate disk space used by the entry}
if path represents a directory then
for each child entry stored within directory path do
total = total + DiskUsage(child)
{recursive call}
return total
Code Fragment 4.4: An algorithm for computing the cumulative disk space usage
nested at a ﬁle-system entry. Function size returns the immediate disk space of an
entry.
